file: shooter
####################################################################
class Shooter:
	def __init__(self, name, money = 1000, guns = []):
		self.name = name
		self.money = money
		self.guns = guns

	def get_cash(self, cash):
		self.money = self.money + cash
		if cash > 1000:
			return 'Let\'s go to the party'
		else:
			return 'Let\'s go for more money'

	def greet(self):
		if self.money > 100:
			return 'Hello! How are you?'
		else:
			return 'Hello! I need some cash'

	def buy_gun(self, new_gun, gun_cost):
		if self.money >= gun_cost:
			self.money -= gun_cost
			self.guns.append(new_gun)
			return 'Wow! Cool stuff'
		else:
			return 'Sorry :( I have no money for this toy.'

######################################################################
file: test_shooter
######################################################################
# SetUp() - runs before each test method
# TearDown() - runs after each test method

import unittest
from shooter import Shooter


class ShooterTest(unittest.TestCase):

	mock_data = []

	def setUp(self):
		self.jake = Shooter('Jake')
		print(self.mock_data)
		self.mock_data = [1, 2, 3, 4, 5]

	def tearDown(self):
		print(self.mock_data)
		self.mock_data = []

	def test_get_cash(self):
		#jake = Shooter('Jake')
		self.jake.get_cash(500)
		self.assertEqual(self.jake.money, 1500)
		print(self.mock_data)
	def test_greet(self):
		#jake = Shooter('Jake')
		self.assertEqual(self.jake.greet(), 'Hello! How are you?')
		self.jake.money = 50
		self.assertEqual(self.jake.greet(), 'Hello! I need some cash')

if __name__ == '__main__':
	unittest.main()
