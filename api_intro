# Имея html код, мы можем выбирать какую-то информацию,
# распознавать код при помощи Web Scraping и модуля 
# BeautifulSoup. Но это не всегда удобный инструмент
# и его можно использовать тогда, когда на сайте отсутствует API.
# API - application programming interfaces
# Это интерфейс для работы с другими приложениями
# Как правило, конечный пользователь получает всю необходимую информацию
# с web ресурса на экране своего приложения
# Разработчики (Developers) разрабатывает дизайн приложения таким образом, 
# чтобы можно было быстро и удобно получить доступ к базе данных другого сайта
# через API этого сайта. Далее эти API(интерфейс стороннего приложения)
# позволяет присоединиться к своей базе данных чтобы получить нужную информацию
# в своем приложении. Сама БД сконструирована таким образом, чтобы через API
# предлагать свои данные другим приложениям.

# На примере будем рассматривать API, который предоставляет данные о 
# землетрясениях в разных точках земли
# https://earthquake.usgs.gov/fdsnws/event/1/
# Этот сайт предлагает API для получения информации
# Делая запрос на этом сайте, ответы мы получаем в виде json-кода
# json -java script object notation. Это формат передачи данных.
# Для удобства чтения json существуют форматеры, которые преобразуют код в более
# читаемый вид 

import requests
url ='https://earthquake.usgs.gov/fdsnws/event/1/query?'
response = requests.get(url, headers={'Accept':'application/json'}, params=
	{'format':'geojson',
	'starttime':'2019-01-01',
	'endtime':'2019-05-01',
	'latitude':'51.51',
	'longitude':'-0.12',
	'maxradiuskm':'2000'})
# Мы можем употреблять параметры (в данном случае 'format', 'starttime и тд)
# не в строке url (жестко зафиксированными), а передавая их в параметрах 
# метода get, указав еще один параметр params=, как это представлено в примерах
# запись в params= должна быть в формате dict (пара ключ:значение)


# Запись headers={'Accept':'application/json'} означает, что мы будем принимать
# данные в формате json

# Получим json код в формате string
print(response.text)

# Мы можем получать json код с помощью метода .json()
# но тогда он будет в формате dict
# такой формат предпочтительнее, так как мы можем делать запросы по ключам
print(response.json())
rint(type(response.json()))

data = response.json()
# теперь в переменной data мы имеем json код в формате dict
# Таким образом, json объект это словарь

print(data['features'][1]['properties']['place'])
# По ключу 'features' мы получили доступ к списку
# далее, указываем первый элемент списка, далее, в этом
# элементе массива находится ключ 'properties' и далее
# нас интересует объект 'place'


# Работа с API в основном выполяется при помощи json
# Нужно уметь распознавать вложенные друг в друга 
# json объекты, либо списки и обращаться к ним соответствующим образом
