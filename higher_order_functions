# С декораторами уже приходилось работать в разделе ООП, методы класса.
# Там мы использовали декоратор @classmethod. Это один из видов декораторов
# high order functions - функции высшего порядка. Они могут принимать в качестве
# параметров другие функции, либо возвращать return другие функции
# Higher order functions, which accept another functions as arguments

# def product(n, func): # в параметр func мы можем поместить любую функцию и далее ее использовать ее внутри product()
#     result = 1
#     for number in range(1, n):  # Для всех чисел из указанного диапазона n
#         result *= func(number)  # мы будем перемножать в переменную result функцию, которую мы будем передавать
#     return result  # в качестве аргумента, после этого мы возвращаем result
#
# # Если при вызове функции product, мы передадим функцию square(), то тогда будут переумножаться квадраты чисел
# # из диапазона range(n)
#
#
# def square(x):
#     return x ** 2
#
#
# def cube(x):
#     return x ** 3
#
# print(product(3, square))
# # Мы передаем не саму функцию square(), а имя функции в качестве параметра для дальнейшего использования
# # 1, 2
# # 1, 4
# # 1 * 4 = 4
#
# print(product(4, square))
# # 1, 2, 3
# # 1, 4, 9
# # 1 * 4 * 9 = 36
#
# print(product(4, cube))
# # 1, 2, 3
# # 1, 8, 27
# # 1 * 8 * 27 = 216

# Так же, в качестве передаваемой функции мы можем использовать встроенную функцию

# def my_function(a, b, func):
#     result = func([a, b])  # Для встроенной функции sum мы должны передавать iterable значения
#     return result
#
#
# print(my_function(7, 3, sum))


# Рассмотрим случай, когда можно использовать внутри одной из функций вложенную функцию
# Using nested function

import random


# def colorize(thing):
#     def get_color():
#         colors = ('red', 'green', 'yellow')
#         color = random.choice(colors)
#         return color
#     result = get_color() + ' ' + thing
#     return result
#
#
# print(colorize('apple'))


# Так же, мы можем возвращать не только результат, но и саму функцию
# Higher order functions, which return another functions as arguments
# Функция get_color() возвращается из функции make_color()
# def make_color():
#     def get_color():
#         colors = ('red', 'green', 'yellow')
#         color = random.choice(colors)
#         return color
#
#     return get_color
#
#
# first_color = make_color()  # Таким образом, в переменной first_color помещена функция get_color
# print(first_color())  # Так как в переменной у нас помещена функция, при печати мы ставим (), вызывая эту функцию
#
# second_color = make_color()
# print(second_color())
#
# third_color = make_color()
# print(third_color())




# Мы можем получать доступ из внутренней функции к парпметру внешней функции
# Inner function can access to outer function scope


def colorize_1(thing):
    def get_color():
        colors = ('red', 'green', 'yellow')
        color = random.choice(colors)
        return color + ' ' + thing
    return get_color
# Параметр thing не определен внутри функции get_color(), мы его используем из внешнего scope
print(colorize_1('apple')())


colorized_thing = colorize_1('stick')
print(colorized_thing())
